@page "/clientes"
@inject IGenericService<Cliente> ClienteService
@inject NavigationManager NavigationManager
@inject SweetAlertService SweetAlert

<HeaderPage TitlePage="Clientes" />

@if (clientes == null)
{
    <p><em>Obteniendo lista de clientes...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Dirección</th>
                <th>Telefono</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in clientes)
            {
                <tr>
                    <td>@cliente.Id</td>
                    <td>@cliente.Nombre</td>
                    <td>@cliente.Direccion</td>
                    <td>@cliente.Telefonos</td>
                    <td>
                        <a href="/editarcliente?idClienteEditado=@cliente.Id" class="btn btn-primary">Editar</a>
                    </td>
                    <td>
                        <button title="Eliminar" @onclick="()=>Eliminar(cliente)" class="btn btn-danger">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="AgregarCliente" class="btn btn-success">Agregar Cliente</button>

@code {
    private List<Cliente> clientes;

    protected override async Task OnInitializedAsync()
    {
        clientes = await ClienteService.GetAllAsync();
    }

    public void AgregarCliente()
    {
        NavigationManager.NavigateTo("/agregarcliente");
    }

    private async Task Eliminar(Cliente cliente)
    {
        SweetAlertResult respuesta = await SweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "Borrando Cliente",
            Text = $"¿Está seguro que desea borrar al cliente {cliente.Nombre}?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí, quiero borrarlo",
            CancelButtonText = "No, espera"
        });

        if (respuesta.IsConfirmed)
        {
            await ClienteService.DeleteAsync(cliente.Id);
            clientes = await ClienteService.GetAllAsync();
            StateHasChanged();
        }
    }
}
